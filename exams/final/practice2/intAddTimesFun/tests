open Common
let rubric_version = "1.0"
let rubric_title = "CS421 Fall 2017 ML5"

(**************************************************************************
 * You can add new test cases by adding new elements to the following lists
 * Format is:
 * TEST<X>ARG(<weight>, <function_name>, <arg1>, <arg2>, ..., <argX>)
 *
 * <X> is the number of argument that the function being tested takes.
 **************************************************************************)

let parse s = Solution.main Picomllex2.token (Lexing.from_string s)
let parse_stu s = Student.main  Picomllex.token  (Lexing.from_string s)


let check_conflicts max_points_lost_for_conflict () =
    let instrm = open_in "conflict_count.txt" in
    let points_lost = int_of_string (input_line instrm) in
    let grading_comment = if points_lost = 0 then "No conflicts found"
                          else "Conflicts found" in
    let score = ((-1) * (min max_points_lost_for_conflict points_lost), 0) in
    let _ = close_in instrm in
    (score, grading_comment)

(* Test cases should go in this list. 
 * The first element of the pair is the weight of the case,
 * and the second is the string to be given to the parser.
 *)

(* This list is for regular problems *)
let test_cases = [
(* INTT, IDENT, simple (<exp>) *)
1, "173;;"; 
1, "(319);;";
1, "let x = 39 ;;";
1, "let a = ((b));;";
1, "let x = (1123);;";
(* infix +, - *)
2, "31 + 20 - 16 - 4 + 20 + 413 - 173 ;;";
1, "30 * 44 * 81 * 3 ;;";
2, "let x = 31 * 20 - 43 * 53 + 32 * 101 + 329;;";
1, "let z = (34 + 42) * (71 - 2956);;";
(* let in *)
1, "let x = fun y -> 45;;";
1, "let y = 90 + fun x -> 35 ;;";
1, "let y = 90 * fun x -> 35;;";
1, "let y = fun x -> x - 90;;";
1, "let y = fun x-> x * 90;;";
3, "let z = fun x -> fun a -> b + 10 * fun d -> fun e -> a * a + 20 * e - d  + 34 * x - 1;;"

]


(* This list is for extra credit problems *)
let extra_test_cases = [
(* lists *)
1, "[10; 20; 30];;";
1, "[fun x -> 139 + 60 * x * x; (48 - 232); z];;";
1, "fun w -> [34] + [w; w];;";
2, "[14 +45; 39 - 1; x * 193; 218 + let z = [a] in a];;";
(* try with *)
2, "try 41 with 1 -> x | 2 -> 328;;";
2, "try 4 with 1 -> 1 | 2 -> try 20 with _ -> 3 | 4 -> 4;;";
3, "try 324 with 1 -> fun x -> 45 * z | 2 -> try 43 + 32 with 3 -> z | 4 ->  51 ;;";
3, "let x = try a with 4 -> b | _ -> c | 5 -> fun z -> 139 - z * x + 49;;"
]


let rubric = ("Test for shift/reduce and reduce/reduce conflicts",
               (check_conflicts 10))::
             (List.map 
              (fun (w,s) -> TEST1ARG_TWOFUN(w, parse, parse_stu, s))
              test_cases)


let extra_rubric = List.map 
             (fun (w,s) -> TEST1ARG_TWOFUN(w, parse, parse_stu, s))
            (* extra_test_cases *) []
