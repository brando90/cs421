let rubric_version = "1.0"
let rubric_title = "Tail Recursion and fold_left, all_nonneg"
(**************************************************************************
 * You can add new test cases by adding new elements to the following lists
 * Format is:
 * TEST<X>ARG(<weight>, <function_name>, <arg1>, <arg2>, ..., <argX>)
 *
 * <X> is the number of argument that the function being tested takes.
 **************************************************************************)

let file = "student.ml"
(*
let even_count_fr_stu l = List.fold_right Student.even_count_fr_rec l Student.even_count_fr_base
let even_count_fr_sol l = List.fold_right Solution.even_count_fr_rec l Solution.even_count_fr_base

let pair_sums_map_arg_stu l = List.map Student.pair_sums_map_arg l
let pair_sums_map_arg_sol l = List.map Solution.pair_sums_map_arg l

let remove_even_stu l = List.fold_right Student.remove_even_rec l Student.remove_even_base
let remove_even_sol l = List.fold_right Solution.remove_even_rec l Solution.remove_even_base

let sift_stu f lst = List.fold_right (Student.sift_rec f) lst Student.sift_base
let sift_sol f lst = List.fold_right (Solution.sift_rec f) lst Solution.sift_base

let even_count_tr_stu l = List.fold_left Student.even_count_tr_step Student.even_count_tr_start l
let even_count_tr_sol l = List.fold_left Solution.even_count_tr_step Solution.even_count_tr_start l

let count_element_stu l m = List.fold_left (Student.count_element_step m) Student.count_element_start l
let count_element_sol l m = List.fold_left (Solution.count_element_step m) Solution.count_element_start l

let split_sum_stu l f = List.fold_left (Student.split_sum_step f) Student.split_sum_start l
let split_sum_sol l f = List.fold_left (Solution.split_sum_step f) Solution.split_sum_start l
*)
let all_nonneg_stu l = List.fold_left Student.all_nonneg_step Student.all_nonneg_start l
let all_nonneg_sol l = List.fold_left Solution.all_nonneg_step Solution.all_nonneg_start l
(*
let exists_between_stu m n l = List.fold_left (Student.exists_between_step m n) Student.exists_between_start l
let exists_between_sol m n l = List.fold_left (Solution.exists_between_step m n) Solution.exists_between_start l

let rev_append_stu l = List.fold_right Student.rev_append_rec l Student.rev_append_base
let rev_append_sol l = List.fold_right Solution.rev_append_rec l Solution.rev_append_base
*)
open Check_recursion
let app_all_with_form_check  = fun _ -> true
let forward_recursion_check = fun _ -> fun _ -> true
let tail_recursion_check = fun _ -> fun _ -> true
let check_form_app_all_with file =
    let (is_fwd, is_tl, lib_deps) = List.assoc "app_all_with" (classify_decs (decs_from_file file) [])
    in is_fwd && is_tl && (List.for_all (fun d -> d = "List.map") lib_deps)

(* This list is for regular problems *)
let rubric =
[
    (* Problem 9 *)
     TEST1ARG(1, all_nonneg, [4; 7; -3; 5]);
     TEST1ARG(1, all_nonneg, []);
     TEST1ARG(1, all_nonneg, [4; 7; 5]);
    TEST2ARG_TWOFUN(3, tail_recursion_check, check_tail_recursive_no_libs, file, "all_nonneg");
    (* Problem 19 *)
     TEST1ARG_TWOFUN(2, all_nonneg_sol, all_nonneg_stu, [4; 7; -3; 5]);
     TEST1ARG_TWOFUN(2, all_nonneg_sol, all_nonneg_stu, []);
     TEST1ARG_TWOFUN(2, all_nonneg_sol, all_nonneg_stu, [4; 7; 5]);

]
(* Note: the last entry should not be followed by a semicolon. *)

let extra_rubric = [
]
