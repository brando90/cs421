open Common
let rubric_version = "1.0"
let rubric_title = "CS421 Fall 2017 ML5"

(**************************************************************************
 * You can add new test cases by adding new elements to the following lists
 * Format is:
 * TEST<X>ARG(<weight>, <function_name>, <arg1>, <arg2>, ..., <argX>)
 *
 * <X> is the number of argument that the function being tested takes.
 **************************************************************************)

let parse s = Solution.main Picomllex2.token (Lexing.from_string s)
let parse_stu s = Student.main  Picomllex.token  (Lexing.from_string s)

let check_conflicts max_points_lost_for_conflict () =
    let instrm = open_in "conflict_count.txt" in
    let points_lost = int_of_string (input_line instrm) in
    let grading_comment = if points_lost = 0 then "No conflicts found"
                          else "Conflicts found" in
    let score = ((-1) * (min max_points_lost_for_conflict points_lost), 0) in
    let _ = close_in instrm in
    (score, grading_comment)

(* Test cases should go in this list. 
 * The first element of the pair is the weight of the case,
 * and the second is the string to be given to the parser.
 *)

(* This list is for regular problems *)
let test_cases = [
(* FLOAT, IDENT, simple (<exp>) *)
1, "17.3;;"; 
1, "(31.9);;";
1, "let x = 3.9 ;;";
1, "let a = ((b));;";
1, "let x = (1.123);;";
(* infix +., -. *)
2, "3.1 +. 2.0 -. 1.6 -. 4. +. 2.0 +. 4.13 -. 17.3 ;;";
1, "3.0 ** 4.4 ** 8.1 ** 0.3 ;;";
2, "let x = 3.1 ** 2.0 -. 4.3 ** 5.3 +. 3.2 ** 10.1 +. 32.9;;";
1, "let z = (3.4 +. 4.2) ** (7.1 -. 29.56);;";
(* let in *)
1, "let x = let y = 2.3 in 4.5;;";
1, "let y = 9.0 +. let x = 3.5 in x;;";
1, "let y = 9.0 ** let x = 3.5 in x;;";
1, "let y = let x = 3.5 in x -. 9.0;;";
1, "let y = let x = 3.5 in x ** 9.0;;";
3, "let z = let x = let a = b +. 1.0 in let d = let e = a ** a in 2.0 ** e in d  +. 3.4 in x -. 0.1;;"

]


(* This list is for extra credit problems *)
let extra_test_cases = [
(* lists *)
1, "[1.0; 2.0; 3.0];;";
1, "[let x = 13.9 +. 6.0 in x ** x; (4.8 -. 23.2); z];;";
1, "let w = [3.4] in [w; w];;";
2, "[1.4 +.4.5; 3.9 -. 0.1; x ** 19.3; 21.8 +. let z = [a] in a];;";
(* try with *)
2, "try 4.1 with 1 -> x | 2 -> 32.8;;";
2, "try 0.4 with 1 -> 1 | 2 -> try 2.0 with _ -> 3 | 4 -> 4;;";
3, "try 32.4 with 1 -> let x = 4.5 in z | 2 -> try 4.3 +. 3.2 with 3 -> z | 4 ->  5.1 ;;";
3, "let x = try a with 4 -> b | _ -> c | 5 -> let z = 13.9 in z in x +. 4.9;;"
]


let rubric = ("Test for shift/reduce and reduce/reduce conflicts",
               (check_conflicts 10))::
             (List.map 
              (fun (w,s) -> TEST1ARG_TWOFUN(w, parse, parse_stu, s))
              test_cases)


let extra_rubric = List.map 
             (fun (w,s) -> TEST1ARG_TWOFUN(w, parse, parse_stu, s))
             (*extra_test_cases*) []
