# 1 "student.mll"
 
open Common;;


# 7 "student.ml"
let __ocaml_lex_tables = {
  Lexing.lex_base =
   "\000\000\002\000\204\255\017\000\029\000\079\000\001\000\213\255\
    \214\255\215\255\005\000\001\000\000\000\001\000\001\000\003\000\
    \011\000\012\000\005\000\003\000\003\000\233\255\017\000\029\000\
    \013\000\240\255\027\000\028\000\244\255\046\000\054\000\077\000\
    \092\000\252\255\253\255\254\255\255\255\237\255\247\255\246\255\
    \245\255\248\255\239\255\242\255\241\255\219\255\236\255\234\255\
    \232\255\023\000\231\255\040\000\230\255\026\000\042\000\229\255\
    \042\000\225\255\227\255\228\255\027\000\044\000\036\000\226\255\
    \046\000\223\255\212\255\049\000\224\255\034\000\047\000\222\255\
    \036\000\221\255\220\255\217\255\043\000\047\000\041\000\056\000\
    \211\255\202\255\200\255\110\000\130\000\140\000\152\000\164\000\
    \063\000\070\000\203\255\055\000\070\000\201\255";
  Lexing.lex_backtrk =
   "\255\255\255\255\255\255\046\000\046\000\046\000\255\255\255\255\
    \255\255\255\255\039\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\037\000\255\255\020\000\255\255\
    \017\000\255\255\050\000\012\000\255\255\049\000\006\000\005\000\
    \004\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\048\000\255\255\047\000\255\255\048\000\
    \255\255\255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_default =
   "\255\255\255\255\000\000\255\255\255\255\255\255\255\255\000\000\
    \000\000\000\000\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\000\000\255\255\255\255\
    \255\255\000\000\255\255\255\255\000\000\255\255\255\255\255\255\
    \255\255\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\255\255\000\000\255\255\000\000\255\255\255\255\000\000\
    \255\255\000\000\000\000\000\000\255\255\255\255\255\255\000\000\
    \255\255\000\000\000\000\255\255\000\000\255\255\255\255\000\000\
    \255\255\000\000\000\000\000\000\255\255\255\255\255\255\255\255\
    \000\000\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\000\000\255\255\255\255\000\000";
  Lexing.lex_trans =
   "\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\036\000\035\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \036\000\000\000\000\000\000\000\000\000\000\000\011\000\074\000\
    \010\000\009\000\031\000\029\000\008\000\032\000\075\000\030\000\
    \005\000\004\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\023\000\022\000\027\000\025\000\026\000\083\000\
    \021\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\083\000\047\000\004\000\004\000\003\000\
    \003\000\003\000\003\000\003\000\003\000\003\000\003\000\046\000\
    \044\000\043\000\042\000\020\000\041\000\002\000\028\000\007\000\
    \048\000\018\000\077\000\088\000\040\000\017\000\006\000\089\000\
    \049\000\016\000\069\000\061\000\019\000\014\000\012\000\072\000\
    \067\000\058\000\001\000\051\000\015\000\060\000\076\000\013\000\
    \053\000\059\000\054\000\039\000\024\000\083\000\033\000\004\000\
    \004\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\045\000\038\000\050\000\052\000\056\000\055\000\057\000\
    \064\000\062\000\063\000\066\000\065\000\068\000\070\000\071\000\
    \073\000\081\000\037\000\078\000\079\000\080\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \091\000\090\000\092\000\093\000\000\000\000\000\000\000\000\000\
    \000\000\082\000\085\000\085\000\085\000\085\000\085\000\085\000\
    \085\000\085\000\085\000\085\000\085\000\085\000\085\000\085\000\
    \085\000\085\000\085\000\085\000\085\000\085\000\000\000\084\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\000\000\086\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\000\000\000\000\
    \000\000\000\000\000\000\085\000\085\000\085\000\085\000\085\000\
    \085\000\000\000\000\000\000\000\000\000\085\000\085\000\085\000\
    \085\000\085\000\085\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \034\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000";
  Lexing.lex_check =
   "\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\000\000\000\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\000\000\011\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\010\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
    \000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\000\
    \000\000\003\000\003\000\003\000\003\000\003\000\003\000\003\000\
    \003\000\003\000\003\000\004\000\022\000\004\000\004\000\004\000\
    \004\000\004\000\004\000\004\000\004\000\004\000\004\000\023\000\
    \026\000\027\000\027\000\000\000\029\000\000\000\000\000\000\000\
    \020\000\000\000\006\000\001\000\030\000\000\000\000\000\001\000\
    \019\000\000\000\013\000\015\000\000\000\000\000\000\000\012\000\
    \014\000\016\000\000\000\018\000\000\000\015\000\006\000\000\000\
    \017\000\016\000\017\000\031\000\000\000\005\000\000\000\005\000\
    \005\000\005\000\005\000\005\000\005\000\005\000\005\000\005\000\
    \005\000\024\000\032\000\049\000\051\000\053\000\054\000\056\000\
    \060\000\061\000\062\000\064\000\060\000\067\000\069\000\070\000\
    \072\000\076\000\032\000\077\000\078\000\079\000\083\000\083\000\
    \083\000\083\000\083\000\083\000\083\000\083\000\083\000\083\000\
    \088\000\089\000\091\000\092\000\255\255\255\255\255\255\255\255\
    \255\255\005\000\084\000\084\000\084\000\084\000\084\000\084\000\
    \084\000\084\000\084\000\084\000\085\000\085\000\085\000\085\000\
    \085\000\085\000\085\000\085\000\085\000\085\000\255\255\005\000\
    \086\000\086\000\086\000\086\000\086\000\086\000\086\000\086\000\
    \086\000\086\000\255\255\083\000\087\000\087\000\087\000\087\000\
    \087\000\087\000\087\000\087\000\087\000\087\000\255\255\255\255\
    \255\255\255\255\255\255\084\000\084\000\084\000\084\000\084\000\
    \084\000\255\255\255\255\255\255\255\255\085\000\085\000\085\000\
    \085\000\085\000\085\000\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \000\000\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
    \255\255\255\255\255\255\255\255\255\255";
  Lexing.lex_base_code =
   "";
  Lexing.lex_backtrk_code =
   "";
  Lexing.lex_default_code =
   "";
  Lexing.lex_trans_code =
   "";
  Lexing.lex_check_code =
   "";
  Lexing.lex_code =
   "";
}

let rec token lexbuf =
   __ocaml_lex_token_rec lexbuf 0
and __ocaml_lex_token_rec lexbuf __ocaml_lex_state =
  match Lexing.engine __ocaml_lex_tables __ocaml_lex_state lexbuf with
      | 0 ->
# 18 "student.mll"
               ( token lexbuf )
# 177 "student.ml"

  | 1 ->
# 19 "student.mll"
               ( token lexbuf )
# 182 "student.ml"

  | 2 ->
# 20 "student.mll"
               ( EOF          )
# 187 "student.ml"

  | 3 ->
# 22 "student.mll"
            ( NEG )
# 192 "student.ml"

  | 4 ->
# 23 "student.mll"
            ( MINUS  )
# 197 "student.ml"

  | 5 ->
# 24 "student.mll"
            ( TIMES  )
# 202 "student.ml"

  | 6 ->
# 25 "student.mll"
            ( DIV  )
# 207 "student.ml"

  | 7 ->
# 26 "student.mll"
            ( DPLUS  )
# 212 "student.ml"

  | 8 ->
# 27 "student.mll"
            ( DMINUS  )
# 217 "student.ml"

  | 9 ->
# 28 "student.mll"
            ( DTIMES  )
# 222 "student.ml"

  | 10 ->
# 29 "student.mll"
            ( DDIV  )
# 227 "student.ml"

  | 11 ->
# 30 "student.mll"
            ( CARAT  )
# 232 "student.ml"

  | 12 ->
# 31 "student.mll"
            ( LT  )
# 237 "student.ml"

  | 13 ->
# 32 "student.mll"
            ( LEQ  )
# 242 "student.ml"

  | 14 ->
# 33 "student.mll"
            ( GEQ  )
# 247 "student.ml"

  | 15 ->
# 34 "student.mll"
            ( EQUALS  )
# 252 "student.ml"

  | 16 ->
# 35 "student.mll"
            ( NEQ )
# 257 "student.ml"

  | 17 ->
# 36 "student.mll"
            ( PIPE  )
# 262 "student.ml"

  | 18 ->
# 37 "student.mll"
            ( ARROW  )
# 267 "student.ml"

  | 19 ->
# 38 "student.mll"
            ( DCOLON  )
# 272 "student.ml"

  | 20 ->
# 39 "student.mll"
            ( SEMI )
# 277 "student.ml"

  | 21 ->
# 40 "student.mll"
            ( DSEMI )
# 282 "student.ml"

  | 22 ->
# 41 "student.mll"
            ( AT  )
# 287 "student.ml"

  | 23 ->
# 42 "student.mll"
            ( NIL )
# 292 "student.ml"

  | 24 ->
# 43 "student.mll"
            ( LET  )
# 297 "student.ml"

  | 25 ->
# 44 "student.mll"
            ( AND)
# 302 "student.ml"

  | 26 ->
# 45 "student.mll"
            ( END)
# 307 "student.ml"

  | 27 ->
# 46 "student.mll"
            ( IN  )
# 312 "student.ml"

  | 28 ->
# 47 "student.mll"
            ( IF  )
# 317 "student.ml"

  | 29 ->
# 48 "student.mll"
            ( THEN  )
# 322 "student.ml"

  | 30 ->
# 49 "student.mll"
            ( ELSE  )
# 327 "student.ml"

  | 31 ->
# 50 "student.mll"
            ( MOD  )
# 332 "student.ml"

  | 32 ->
# 51 "student.mll"
            ( TRY )
# 337 "student.ml"

  | 33 ->
# 52 "student.mll"
            ( WITH )
# 342 "student.ml"

  | 34 ->
# 53 "student.mll"
            ( NOT  )
# 347 "student.ml"

  | 35 ->
# 54 "student.mll"
            ( LOGICALAND)
# 352 "student.ml"

  | 36 ->
# 55 "student.mll"
            ( LOGICALOR)
# 357 "student.ml"

  | 37 ->
# 56 "student.mll"
            ( LBRAC  )
# 362 "student.ml"

  | 38 ->
# 57 "student.mll"
            ( UNIT )
# 367 "student.ml"

  | 39 ->
# 58 "student.mll"
            ( LPAREN  )
# 372 "student.ml"

  | 40 ->
# 59 "student.mll"
            ( RPAREN  )
# 377 "student.ml"

  | 41 ->
# 60 "student.mll"
            ( COMMA  )
# 382 "student.ml"

  | 42 ->
# 61 "student.mll"
            ( UNDERSCORE )
# 387 "student.ml"

  | 43 ->
# 62 "student.mll"
            ( TRUE )
# 392 "student.ml"

  | 44 ->
# 63 "student.mll"
            ( FALSE )
# 397 "student.ml"

  | 45 ->
# 64 "student.mll"
            ( UNIT )
# 402 "student.ml"

  | 46 ->
let
# 66 "student.mll"
                s
# 408 "student.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 66 "student.mll"
                          ( INT (int_of_string s) )
# 412 "student.ml"

  | 47 ->
let
# 67 "student.mll"
                        s
# 418 "student.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 67 "student.mll"
                          ( INT (int_of_string s) )
# 422 "student.ml"

  | 48 ->
let
# 68 "student.mll"
                                                 s
# 428 "student.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 68 "student.mll"
                                                         ( FLOAT (float_of_string s) )
# 432 "student.ml"

  | 49 ->
# 71 "student.mll"
        ( PLUS )
# 437 "student.ml"

  | 50 ->
# 72 "student.mll"
        ( GT )
# 442 "student.ml"

  | 51 ->
# 73 "student.mll"
        ( RBRAC )
# 447 "student.ml"

  | 52 ->
# 74 "student.mll"
          ( REC )
# 452 "student.ml"

  | 53 ->
# 75 "student.mll"
          ( FUN )
# 457 "student.ml"

  | 54 ->
# 76 "student.mll"
            ( RAISE )
# 462 "student.ml"

  | 55 ->
let
# 78 "student.mll"
                           s
# 468 "student.ml"
= Lexing.sub_lexeme lexbuf lexbuf.Lexing.lex_start_pos lexbuf.Lexing.lex_curr_pos in
# 78 "student.mll"
                             ( INT (int_of_string s)  )
# 472 "student.ml"

  | __ocaml_lex_state -> lexbuf.Lexing.refill_buff lexbuf;
      __ocaml_lex_token_rec lexbuf __ocaml_lex_state

;;

# 81 "student.mll"
 (* do not modify this function: *)
 let lextest s = token (Lexing.from_string s)

 let get_all_tokens s =
     let b = Lexing.from_string (s^"\n") in
     let rec g () =
     match token b with EOF -> []
     | t -> t :: g () in
     g ()

let try_get_all_tokens s =
    try (Some (get_all_tokens s), true)
    with Failure "unmatched open comment" -> (None, true)
       | Failure "unmatched closed comment" -> (None, false)
 
# 495 "student.ml"
